user_agent_header="User-Agent: OpenSIPS LRN Server"
log_facility=LOG_LOCAL7

log_level=3
log_stderror=no
children=3

disable_dns_blacklist=yes
dns_try_ipv6=no
auto_aliases=no

listen=udp:10.132.0.9:5060

mpath="/usr/local/lib64/opensips/modules"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

loadmodule "db_mysql.so"

loadmodule "avpops.so"
modparam("avpops", "db_url", "mysql://root:opensips@localhost/opensips")

#### UDP protocol
loadmodule "proto_udp.so"

# Memcache
loadmodule "cachedb_memcached.so"
modparam("cachedb_memcached", "cachedb_url","memcached:local://127.0.0.1:11211,127.0.0.1:11212/")

loadmodule "cachedb_redis.so"
modparam("cachedb_redis", "cachedb_url","redis:0://localhost:6379/")
modparam("cachedb_redis", "cachedb_url","redis:1://localhost:6379/")

loadmodule "drouting.so"
modparam("drouting", "db_url", "mysql://root:opensips@localhost/opensips")

####### Routing Logic ########

route{
        if (is_method("OPTIONS")) {
                sl_send_reply("200","OK");
                exit;
        }

	if (!mf_process_maxfwd_header("10")) {
                sl_send_reply("483","Too Many Hops");
                exit;
        }

	if ( is_method("INVITE") && $src_ip == "192.168.1.10" ) {
		
		$avp(start_time) = $Tsm;
		xlog("L_INFO", "---------START time : [$Tf] ---------------------\n");
        	
		xlog("L_INFO", "NEW Incoming request...\n");
                xlog("L_INFO", "Source IP: $si\n");
                xlog("L_INFO", "Source Port: $sp\n");
		xlog("L_INFO", "SIP Method: $rm\n");
                xlog("L_INFO", "Request uri: $ru\n");
                xlog("L_INFO", "Request ruri: $ruri\n");
                xlog("L_INFO", "From uri: $fu\n");
                xlog("L_INFO", "From Number: $fU\n");
                xlog("L_INFO", "DestinationUri: $tu\n");
                xlog("L_INFO", "Callid: $ci\n");
                xlog("L_INFO", "User Agent: $ua\n");
                xlog("L_INFO", "Contact Header: $ct\n");
                xlog("L_INFO", "DestinationNum: $tU\n");
                
		xlog("L_INFO", "Clearing AVP(100) Variable\n");
		avp_delete("$avp(100)/g");

		if(is_present_hf("Contact")) {
			remove_hf("Contact");
			xlog("L_INFO", "Current Contact header Removed\n");
		}	

		# Example Number : 302122228XXX
		$var(number)=$tU; 
		$avp(fixed_number)=$(var(number){s.substr,-10,10});
		$avp(fixed_dst_number)=$(var(number){s.substr,-12,12});

		# 2122228XXX	
		xlog("L_INFO", "Number after substr is : $avp(fixed_number)\n");

		# 302xxxxxxxxx
		if ($avp(fixed_dst_number)=~"^302") {
			xlog("L_INFO", "Phone : $avp(fixed_number) is Local\n");
			$avp(internal_routing_prefix)="9992";
		}

		# 3069xxxxxxxx
		if ($avp(fixed_dst_number)=~"^3069") {
                        xlog("L_INFO", "Phone $avp(fixed_number) is Mobile\n");
			$avp(internal_routing_prefix)="9996";
                }

		#
		# If Number is NOT Local:302xxxxxxxxx) or Mobile : 3069xxxxxxxx) then reply with the save Destination number to the request
		#
		if (!$avp(internal_routing_prefix)) {
			xlog("Wrong_Number : $tU !!!\n");
                        $avp(new_contact)="<sip:"+$rU+";rn="+ $tU + "@opensips.org"+">";
                        xlog("L_INFO", "Wrong_Number - Sending reply : $avp(new_contact)\n");       
                        
			append_to_reply("Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, SUBSCRIBE, NOTIFY, INFO, PUBLISH\r\n");
                        append_to_reply("Supported: replaces, timer\r\n");
                        append_to_reply("Contact: Transfer $avp(new_contact)\r\n");
                        sl_send_reply("302", "Moved Temporarily");
                        
			$avp(stop_time) = $Tsm;
                        $avp(execution_time) = $avp(stop_time) - $avp(start_time);
                        xlog("L_INFO", "--------- Wrong_Number : $avp(fixed_dst_number)  - Response time :  $avp(execution_time) MicroSeconds ---------\n");
                        exit;
		}
		

		# If Yes then Search Memcache DB First for previous saved values and if Found then reply NOW
		if(cache_fetch("memcached:local","prefix_$avp(fixed_number)",$avp(100))) {
			
			# memcache support
			xlog("L_INFO", "Stored memcached value for prefix found is $avp(100)\n");
			$avp(prefix_from_db)=$avp(100);
			
			$avp(new_contact)="<sip:"+$rU+";npdi;rn="+ $avp(internal_routing_prefix) + $avp(prefix_from_db) + $avp(fixed_dst_number) + "@opensips.org"+">";
			xlog("L_INFO", "Sending reply : $avp(new_contact)\n");	
                	
			append_to_reply("Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, SUBSCRIBE, NOTIFY, INFO, PUBLISH\r\n");
                	append_to_reply("Supported: replaces, timer\r\n");
                	append_to_reply("Contact: Transfer $avp(new_contact)\r\n");
                	sl_send_reply("302", "Moved Temporarily");
                	
			if ($avp(prefix_from_db)) {	
				$avp(stop_time) = $Tsm;
                        	$avp(execution_time) = $avp(stop_time) - $avp(start_time);
                        	xlog("L_INFO", "--------- Prefix_Found_Memcache - Prefix : $avp(prefix_from_db) - for : $avp(fixed_dst_number)  - Response time :  $avp(execution_time) MicroSeconds ---------\n");
			}
			exit;	
		} else {
			#
			# If prothema for certain number not found on Memcache then Search local Redis DBs First 
			#
			xlog("L_INFO", "Prefix for $avp(fixed_number) doesn't exist on Memcache DB. Searching Redis...\n");
			#
			# Search REDIS:0
			#
			xlog("L_INFO", "Searching First Redis DB : 0 for Number: $avp(fixed_number)\n");
			cache_raw_query("redis:0","HGET NUMBER $avp(fixed_number)","$avp(prefix_from_db)");	
			xlog("L_INFO","REDIS : 0 -  prefix_from_db is : $avp(prefix_from_db)\n");

			if ($avp(prefix_from_db)) {
				$avp(stop_time) = $Tsm;
                        	$avp(execution_time) = $avp(stop_time) - $avp(start_time);
                        	xlog("L_INFO", "--------- Prefix_Found_Redis_0 - Prefix : $avp(prefix_from_db) - for : $avp(fixed_dst_number)  - Response time :  $avp(execution_time) MicroSeconds ---------\n");
			}
		
			#
                        # Search REDIS:1 ONLY if Prefix NOT Found on Redis:0
			#	
			if (!$avp(prefix_from_db)) {	
				xlog("L_INFO", "Searching Second Redis DB : 1\n");
				cache_raw_query("redis:1","HGET NUMBER $avp(fixed_number)","$avp(prefix_from_db)");
				xlog("L_INFO","REDIS : 1 -  prefix_from_db is : $avp(prefix_from_db)\n");
			
				$avp(stop_time) = $Tsm;
                        	$avp(execution_time) = $avp(stop_time) - $avp(start_time);
                        	xlog("L_INFO", "--------- Prefix_Found_Redis_1 - Prefix : $avp(prefix_from_db) - for : $avp(fixed_dst_number)  - Response time :  $avp(execution_time) MicroSeconds ---------\n");
			} 

			#
			# if Prefix is FOUND on Redis DB then reply NOW!
			#
			if ($avp(prefix_from_db)) {
                                xlog("L_INFO", "Prefix FOUND from Redis is : $avp(prefix_from_db)\n");
                                $avp(new_contact)="<sip:"+$rU+";npdi;rn="+ $avp(internal_routing_prefix) + $avp(prefix_from_db) + $avp(fixed_dst_number) + "@opensips.org"+">";
                                xlog("L_INFO", "Sending reply : $avp(new_contact)\n");       
                                # Save Also to Memcache
                                $avp(100)=$avp(prefix_from_db);
                                xlog("L_INFO", "Saving prothema : $avp(100) for number : $avp(fixed_number) to memcache DB for 1 hour\n");
                                cache_store("memcached:local","prefix_$avp(fixed_number)","$avp(100)",3600);
                                xlog("L_INFO", "New Contact header is: $avp(new_contact)\n");
                                
				append_to_reply("Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, SUBSCRIBE, NOTIFY, INFO, PUBLISH\r\n");
                                append_to_reply("Supported: replaces, timer\r\n");
                                append_to_reply("Contact: Transfer $avp(new_contact)\r\n");
                                sl_send_reply("302", "Moved Temporarily");
                                
				$avp(stop_time) = $Tsm;
                                $avp(execution_time) = $avp(stop_time) - $avp(start_time);
                        	xlog("L_INFO", "--------- Prefix_Found_Locally - Prefix : $avp(prefix_from_db) - for : $avp(fixed_dst_number)  - Response time :  $avp(execution_time) MicroSeconds ---------\n");
				exit;
			}


			#
			# Finaly if Prefix for the requested number still doesn't exist on both Redis DBs and Memcache then search if this number is part or known Ranges saved on Local Mysql.
			#
			if (!$avp(prefix_from_db)) {
				xlog("------------------------ Search for Ranges for Specific Vendor saved on Routing GROUP : 0 -----------------\n");
				strip(2);
				if (do_routing("0","C")) {
                                        # Manually set Prefix = 590 for this Vendor that we have saved its own prefixes on DB 
                                        $avp(prefix_from_db)="590";
                                        xlog("------------------\n");
                                        xlog("----------------> Vendor Prefix Number : $avp(fixed_number)  <---------------\n");
                                        $avp(new_contact)="<sip:"+$rU+";npdi;rn="+ $avp(internal_routing_prefix) + $avp(prefix_from_db) + $avp(fixed_dst_number) + "@opensips.org"+">";

                                        # Save Also to Memcache
                                        $avp(100)=$avp(prefix_from_db);
                                        xlog("L_INFO", "VENDOR RANGE : Saving prefix : $avp(100) for number : $avp(fixed_number) to memcache DB for 1 hour\n");
                                        cache_store("memcached:local","prefix_$avp(fixed_number)","$avp(100)",3600);
                                        
					xlog("L_INFO", "VENDOR RAGNE : Sending reply : $avp(new_contact)\n");       
                                       
					# Build our OpenSIPS Reply 
					append_to_reply("Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, SUBSCRIBE, NOTIFY, INFO, PUBLISH\r\n");
                                        append_to_reply("Supported: replaces, timer\r\n");
                                        append_to_reply("Contact: Transfer $avp(new_contact)\r\n");
                                        sl_send_reply("302", "Moved Temporarily");
                                        
					$avp(stop_time) = $Tsm;
					$avp(execution_time) = $avp(stop_time) - $avp(start_time);
                        		xlog("L_INFO", "--------- Found number in local Ranges DB - Prefix : $avp(prefix_from_db) - for : $avp(fixed_dst_number)  - Response time :  $avp(execution_time) MicroSeconds ---------\n");
				} else {  
					xlog("Prefix from Redis is NULL / NPDI Removed\n");
					$avp(new_contact)="<sip:"+$rU+";rn="+ $avp(fixed_dst_number) + "@opensips.org"+">";
					xlog("L_INFO", "Sending reply : $avp(new_contact)\n");	
                	        
					# Save this response Also to Memcache even if NULL
                                	$avp(100)=$avp(prefix_from_db);
					
					xlog("L_INFO", "Saving prefix : $avp(100) for number : $avp(fixed_number) to memcache DB for 1 hour\n");
					cache_store("memcached:local","prefix_$avp(fixed_number)","$avp(100)",3600);	
                	        	
					# Build our OpenSIPS Reply 
					append_to_reply("Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, SUBSCRIBE, NOTIFY, INFO, PUBLISH\r\n");
                	        	append_to_reply("Supported: replaces, timer\r\n");
                	        	append_to_reply("Contact: Transfer $avp(new_contact)\r\n");
                	        	sl_send_reply("302", "Moved Temporarily");
                	        	
					$avp(stop_time) = $Tsm;
					$avp(execution_time) = $avp(stop_time) - $avp(start_time);
                        		xlog("L_INFO", "--------- NO_Prefix_Found - Prefix : $avp(prefix_from_db) - for : $avp(fixed_dst_number)  - Response time :  $avp(execution_time) MicroSeconds ---------\n");
					exit;
				}
			}
		}
	} else {
		send_reply("403","Access Denied");
                exit;
	}

}
